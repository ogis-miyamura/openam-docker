Listen 80


# Basic modules
LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule status_module modules/mod_status.so
LoadModule env_module modules/mod_env.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule access_compat_module modules/mod_access_compat.so

# Custom header module
LoadModule headers_module modules/mod_headers.so


# Run as non root user
LoadModule unixd_module modules/mod_unixd.so
User daemon
Group daemon


# Custom log format
LoadModule log_config_module modules/mod_log_config.so

LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" \"%{BALANCER_WORKER_ROUTE}e\" \"%{BALANCER_WORKER_NAME}e\"" combined

# Debug load balancer
#
# mod_proxy_balancer - Apache HTTP Server Version 2.5
# http://httpd.apache.org/docs/trunk/en/mod/mod_proxy_balancer.html#stickyness_troubleshooting
# %{MYCOOKIE}C
# The value contained in the cookie with name MYCOOKIE. The name should be the same given in the stickysession attribute.
# %{Set-Cookie}o
# This logs any cookie set by the back-end. You can track, whether the back-end sets the session cookie you expect, and to which value it is set.
# %{BALANCER_SESSION_STICKY}e
# The name of the cookie or request parameter used to lookup the routing information.
# %{BALANCER_SESSION_ROUTE}e
# The route information found in the request.
# %{BALANCER_WORKER_ROUTE}e
# The route of the worker chosen.
# %{BALANCER_ROUTE_CHANGED}e
# Set to 1 if the route in the request is different from the route of the worker, i.e. the request couldn't be handled sticky.
#
# LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" \"%{BALANCER_SESSION_STICKY}e\" \"%{${PROXY_BALANCER_STICKY_COOKIE}}C\" \"%{BALANCER_SESSION_ROUTE}e\" \"%{BALANCER_WORKER_ROUTE}e\" " combined

CustomLog /proc/self/fd/1 combined
ErrorLog /proc/self/fd/2


# Load balancer modules
LoadModule slotmem_shm_module modules/mod_slotmem_shm.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule proxy_express_module modules/mod_proxy_express.so
LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so

# Health check modules
LoadModule proxy_hcheck_module modules/mod_proxy_hcheck.so
LoadModule watchdog_module modules/mod_watchdog.so

# Load balancer manager
ProxyPass /balancer-manager !

<Location /balancer-manager>
    SetHandler balancer-manager
    Order deny,allow
    Deny from all

    #Allow from 127.0.0.1 ::1
    Allow from all

    Satisfy all
</Location>


# Load balancer main

# Configure for reverse proxy
ProxyRequests Off

# nofailover=Off: because OpenAM supports session failover (On: ワーカーがエラーを起こしたり無効になっている場合にセッションが切れます)
# timeout=1: フリーのワーカーを取得するまでの最大待機時間(秒) (デフォルトでは待機しません)
ProxyPass ${OPENAM_PROXY_PATH} balancer://openam/ nofailover=Off maxattempts=${PROXY_BALANCER_RETRY}
ProxyPassReverse ${OPENAM_PROXY_PATH} balancer://openam/

# Health check templates
ProxyHCExpr ok234 {%{REQUEST_STATUS} =~ /^[234]/}
ProxyHCTemplate openam_hc hcmethod=${OPENAM_HEALTHCHECK_METHOD} hcuri=${OPENAM_HEALTHCHECK_PATH} hcexpr=ok234 hcinterval=${OPENAM_HEALTHCHECK_INTERVAL_SEC} hcpasses=1 hcfails=2

# Edit amlbcookie cookie value for Apache balancer spec (xxxx.routeID)
# ex. Modify "Set-Cookie: amlbcookie=xxxxx;..." to "Set-Cookie: amlbcookie=xxxx.01;..."
Header edit Set-Cookie ^(${OPENAM_PROXY_BALANCER_STICKY_COOKIE}=[^;]*)(;.*)$ "$1.%{BALANCER_WORKER_ROUTE}e$2" env=BALANCER_ROUTE_CHANGED

<Proxy balancer://openam>
    BalancerMember http://${OPENAM_PRIMARY_HOSTNAME}:8080 route=01 loadfactor=10 keepalive=On retry=0 hctemplate=openam_hc
    BalancerMember http://${OPENAM_SECONDARY_HOSTNAME}:8080 route=02 loadfactor=10 keepalive=On retry=0 hctemplate=openam_hc
    ProxySet stickysession=${OPENAM_PROXY_BALANCER_STICKY_COOKIE} failonstatus=500,503
</Proxy>
